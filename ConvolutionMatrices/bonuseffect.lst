


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             BonusEffect, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 IMPORT           getPicAddr
    4 00000000                 IMPORT           putPic
    5 00000000                 IMPORT           getPicWidth
    6 00000000                 IMPORT           getPicHeight
    7 00000000                 EXPORT           start
    8 00000000                 PRESERVE8
    9 00000000         
   10 00000000         start
   11 00000000         
   12 00000000 EBFFFFFE        BL               getPicAddr  ; load the start ad
                                                            dress of the image 
                                                            in R4
   13 00000004 E1A04000        MOV              R4, R0
   14 00000008 EBFFFFFE        BL               getPicHeight ; load the height 
                                                            of the image (rows)
                                                             in R5
   15 0000000C E1A06000        MOV              R6, R0
   16 00000010 EBFFFFFE        BL               getPicWidth ; load the width of
                                                             the image (columns
                                                            ) in R6
   17 00000014 E1A05000        MOV              R5, R0
   18 00000018 E1A00004        MOV              R0, R4
   19 0000001C E59F11AC        LDR              R1, =Matrix
   20 00000020 E1A02005        MOV              R2, R5
   21 00000024 E1A03006        MOV              R3, R6
   22 00000028         ;R0 - Start address
   23 00000028         ;R1 - Matrix start address
   24 00000028         ;R2 - Pic Width
   25 00000028         ;R3 - Pic Height
   26 00000028         applyConvolutionMatrix
   27 00000028 E3A07000        MOV              R7, #0
   28 0000002C E3A08000        MOV              R8, #0
   29 00000030 E1A04000        MOV              R4, R0
   30 00000034 E1A05002        MOV              R5, R2
   31 00000038 E1A06003        MOV              R6, R3
   32 0000003C         
   33 0000003C         OuterLoop
   34 0000003C E1570005        CMP              R7, R5
   35 00000040 1A000003        BNE              startInnerLoop
   36 00000044 E3A07000        MOV              R7, #0
   37 00000048 E2888001        ADD              R8, #1
   38 0000004C E1580006        CMP              R8, R6
   39 00000050 0A000050        BEQ              copy
   40 00000054         startInnerLoop
   41 00000054 E92D0180        STMFD            sp!, {R7-R8}
   42 00000058 E3A0A000        MOV              R10, #0
   43 0000005C E3A0B000        MOV              R11, #0
   44 00000060 E3A0C000        MOV              R12, #0
   45 00000064 E3A03000        MOV              R3, #0
   46 00000068 E2488001        SUB              R8, #1
   47 0000006C E2477001        SUB              R7, #1
   48 00000070         innerLoop
   49 00000070 E3530009        CMP              R3, #9      ;If the current val
                                                            ue in a 1d represen
                                                            tation of the matri
                                                            x is equal to 9
   50 00000074 0A000022        BEQ              endInnerLoop 



ARM Macro Assembler    Page 2 


                                                            ;End the inner loop
                                                            
   51 00000078 E3580000        CMP              R8, #0
   52 0000007C BA000015        BLT              skipPixel
   53 00000080 E3570000        CMP              R7, #0
   54 00000084 BA000013        BLT              skipPixel
   55 00000088 E1570005        CMP              R7, R5
   56 0000008C 0A000011        BEQ              skipPixel
   57 00000090 E1580006        CMP              R8, R6
   58 00000094 0A00000F        BEQ              skipPixel
   59 00000098 E0090598        MUL              R9, R8, R5
   60 0000009C E0899007        ADD              R9, R7
   61 000000A0 E7941109        LDR              R1, [R4, R9, LSL #2]
   62 000000A4 E59F0124        LDR              R0, =Matrix
   63 000000A8 E7900103        LDR              R0, [R0, R3, LSL #2]
   64 000000AC E20120FF        AND              R2, R1, #0x000000FF
   65 000000B0 E0020290        MUL              R2, R0, R2
   66 000000B4 E08AA002        ADD              R10, R2
   67 000000B8 E2012CFF        AND              R2, R1, #0x0000FF00
   68 000000BC E1A02422        LSR              R2, #8
   69 000000C0 E0020290        MUL              R2, R0, R2
   70 000000C4 E08BB002        ADD              R11, R2
   71 000000C8 E20128FF        AND              R2, R1, #0x00FF0000
   72 000000CC E1A02822        LSR              R2, #16
   73 000000D0 E0020290        MUL              R2, R0, R2
   74 000000D4 E08CC002        ADD              R12, R2
   75 000000D8         skipPixel
   76 000000D8 E2833001        ADD              R3, #1
   77 000000DC E3530003        CMP              R3, #3
   78 000000E0 1A000000        BNE              checkSix
   79 000000E4 0A000001        BEQ              notSix
   80 000000E8         checkSix
   81 000000E8 E3530006        CMP              R3, #6
   82 000000EC 1A000002        BNE              notNewMatrixRow
   83 000000F0         notSix
   84 000000F0 E2477002        SUB              R7, #2
   85 000000F4 E2888001        ADD              R8, #1
   86 000000F8 EAFFFFDC        B                innerLoop
   87 000000FC         notNewMatrixRow
   88 000000FC E2877001        ADD              R7, #1
   89 00000100 EAFFFFDA        B                innerLoop
   90 00000104         endInnerLoop
   91 00000104 E8BD0180        LDMFD            sp!, {R7-R8}
   92 00000108 E1A0100A        MOV              R1, R10
   93 0000010C EB000019        BL               divide
   94 00000110 E1A0A000        MOV              R10, R0
   95 00000114 E1A0100B        MOV              R1, R11
   96 00000118 EB000016        BL               divide
   97 0000011C E1A0B000        MOV              R11, R0
   98 00000120 E1A0100C        MOV              R1, R12
   99 00000124 EB000013        BL               divide
  100 00000128 E1A0C000        MOV              R12, R0
  101 0000012C E1A0B40B        LSL              R11, #8
  102 00000130 E1A0C80C        LSL              R12, #16
  103 00000134 E08AA00B        ADD              R10, R11
  104 00000138 E08AA00C        ADD              R10, R12
  105 0000013C E0030695        MUL              R3, R5, R6
  106 00000140 E0849103        ADD              R9, R4, R3, LSL #2
  107 00000144 E00B0598        MUL              R11, R8, R5



ARM Macro Assembler    Page 3 


  108 00000148 E08BB007        ADD              R11, R7
  109 0000014C E789A10B        STR              R10, [R9, R11, LSL #2]
  110 00000150 E2877001        ADD              R7, #1
  111 00000154 EAFFFFB8        B                OuterLoop
  112 00000158         ;getRed
  113 00000158         ;Returns the red component value of a colour
  114 00000158         ;Parameters: Colour: R0, Returns R value in R0
  115 00000158         getRed
  116 00000158 E20000FF        AND              R0, #0x000000FF
  117 0000015C E12FFF1E        BX               lr
  118 00000160         
  119 00000160         ;getGreen
  120 00000160         ;Returns the red component value of a colour
  121 00000160         ;Parameters: Colour: R0, Returns G value in R0
  122 00000160         getGreen
  123 00000160 E2000CFF        AND              R0, #0x0000FF00
  124 00000164 E1A00420        LSR              R0, #8
  125 00000168 E12FFF1E        BX               lr
  126 0000016C         
  127 0000016C         ;getBlue
  128 0000016C         ;Returns the blue component value of a colour
  129 0000016C         ;Parameters: Colour: R0, Returns B value in R0
  130 0000016C         getBlue
  131 0000016C E20008FF        AND              R0, #0x00FF0000
  132 00000170 E1A00820        LSR              R0, #16
  133 00000174 E12FFF1E        BX               lr
  134 00000178         
  135 00000178         ;Divide
  136 00000178         ;Divides A by 9
  137 00000178         ;Parameters: A : R1,  Returns quotient in R0
  138 00000178         divide
  139 00000178 E1A00001        MOV              R0, R1
  140 0000017C E3500000        CMP              R0, #0
  141 00000180 AA000000        BGE              checkGreater
  142 00000184 E3A00000        MOV              R0, #0
  143 00000188         checkGreater
  144 00000188 E35000FF        CMP              R0, #0x000000FF
  145 0000018C BA000000        BLT              stopdivide
  146 00000190 E3A000FF        MOV              R0, #0x000000FF
  147 00000194         stopdivide
  148 00000194 E12FFF1E        BX               lr
  149 00000198         
  150 00000198         
  151 00000198         copy
  152 00000198 E3A07000        MOV              R7, #0
  153 0000019C E3A08000        MOV              R8, #0
  154 000001A0 E0030695        MUL              R3, R5, R6
  155 000001A4 E0849103        ADD              R9, R4, R3, LSL #2
  156 000001A8 EBFFFFFE        BL               getPicAddr  ; load the start ad
                                                            dress of the image 
                                                            in R4
  157 000001AC E1A04000        MOV              R4, R0
  158 000001B0         copyLoop
  159 000001B0 E1570003        CMP              R7, R3
  160 000001B4 0A000003        BEQ              put
  161 000001B8 E7991107        LDR              R1, [R9, R7, LSL #2]
  162 000001BC E7841107        STR              R1, [R4, R7, LSL #2]
  163 000001C0 E2877001        ADD              R7, #1
  164 000001C4 EAFFFFF9        B                copyLoop



ARM Macro Assembler    Page 4 


  165 000001C8         put
  166 000001C8 EBFFFFFE        BL               putPic
  167 000001CC EAFFFFFE 
                       stop    B                stop
  168 000001D0 00000000 
              00000000         AREA             TestData, DATA, READWRITE
  169 00000000 00000000 
              FFFFFFFF 
              00000000 Matrix  DCD              0, -1, 0
  170 0000000C FFFFFFFF 
              00000005 
              FFFFFFFF         DCD              -1, 5, -1
  171 00000018 00000000 
              FFFFFFFF 
              00000000         DCD              0, -1, 0
  172 00000024         
  173 00000024                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\b
onuseffect.d -o.\bonuseffect.o -ID:\Arm\ARM\RV31\INC -ID:\Arm\ARM\CMSIS\Include
 -ID:\Arm\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB S
ETA 1" --predefine="__UVISION_VERSION SETA 517" --predefine="NO_CLOCK_SETUP SET
A 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SETA 1" --predef
ine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\bonuseffect.lst Bonus
Effect.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

BonusEffect 00000000

Symbol: BonusEffect
   Definitions
      At line 1 in file BonusEffect.s
   Uses
      None
Comment: BonusEffect unused
OuterLoop 0000003C

Symbol: OuterLoop
   Definitions
      At line 33 in file BonusEffect.s
   Uses
      At line 111 in file BonusEffect.s
Comment: OuterLoop used once
applyConvolutionMatrix 00000028

Symbol: applyConvolutionMatrix
   Definitions
      At line 26 in file BonusEffect.s
   Uses
      None
Comment: applyConvolutionMatrix unused
checkGreater 00000188

Symbol: checkGreater
   Definitions
      At line 143 in file BonusEffect.s
   Uses
      At line 141 in file BonusEffect.s
Comment: checkGreater used once
checkSix 000000E8

Symbol: checkSix
   Definitions
      At line 80 in file BonusEffect.s
   Uses
      At line 78 in file BonusEffect.s
Comment: checkSix used once
copy 00000198

Symbol: copy
   Definitions
      At line 151 in file BonusEffect.s
   Uses
      At line 39 in file BonusEffect.s
Comment: copy used once
copyLoop 000001B0

Symbol: copyLoop
   Definitions
      At line 158 in file BonusEffect.s
   Uses
      At line 164 in file BonusEffect.s
Comment: copyLoop used once
divide 00000178

Symbol: divide



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 138 in file BonusEffect.s
   Uses
      At line 93 in file BonusEffect.s
      At line 96 in file BonusEffect.s
      At line 99 in file BonusEffect.s

endInnerLoop 00000104

Symbol: endInnerLoop
   Definitions
      At line 90 in file BonusEffect.s
   Uses
      At line 50 in file BonusEffect.s
Comment: endInnerLoop used once
getBlue 0000016C

Symbol: getBlue
   Definitions
      At line 130 in file BonusEffect.s
   Uses
      None
Comment: getBlue unused
getGreen 00000160

Symbol: getGreen
   Definitions
      At line 122 in file BonusEffect.s
   Uses
      None
Comment: getGreen unused
getRed 00000158

Symbol: getRed
   Definitions
      At line 115 in file BonusEffect.s
   Uses
      None
Comment: getRed unused
innerLoop 00000070

Symbol: innerLoop
   Definitions
      At line 48 in file BonusEffect.s
   Uses
      At line 86 in file BonusEffect.s
      At line 89 in file BonusEffect.s

notNewMatrixRow 000000FC

Symbol: notNewMatrixRow
   Definitions
      At line 87 in file BonusEffect.s
   Uses
      At line 82 in file BonusEffect.s
Comment: notNewMatrixRow used once
notSix 000000F0

Symbol: notSix



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 83 in file BonusEffect.s
   Uses
      At line 79 in file BonusEffect.s
Comment: notSix used once
put 000001C8

Symbol: put
   Definitions
      At line 165 in file BonusEffect.s
   Uses
      At line 160 in file BonusEffect.s
Comment: put used once
skipPixel 000000D8

Symbol: skipPixel
   Definitions
      At line 75 in file BonusEffect.s
   Uses
      At line 52 in file BonusEffect.s
      At line 54 in file BonusEffect.s
      At line 56 in file BonusEffect.s
      At line 58 in file BonusEffect.s

start 00000000

Symbol: start
   Definitions
      At line 10 in file BonusEffect.s
   Uses
      At line 7 in file BonusEffect.s
Comment: start used once
startInnerLoop 00000054

Symbol: startInnerLoop
   Definitions
      At line 40 in file BonusEffect.s
   Uses
      At line 35 in file BonusEffect.s
Comment: startInnerLoop used once
stop 000001CC

Symbol: stop
   Definitions
      At line 167 in file BonusEffect.s
   Uses
      At line 167 in file BonusEffect.s
Comment: stop used once
stopdivide 00000194

Symbol: stopdivide
   Definitions
      At line 147 in file BonusEffect.s
   Uses
      At line 145 in file BonusEffect.s
Comment: stopdivide used once
21 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Matrix 00000000

Symbol: Matrix
   Definitions
      At line 169 in file BonusEffect.s
   Uses
      At line 19 in file BonusEffect.s
      At line 62 in file BonusEffect.s

TestData 00000000

Symbol: TestData
   Definitions
      At line 168 in file BonusEffect.s
   Uses
      None
Comment: TestData unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getPicAddr 00000000

Symbol: getPicAddr
   Definitions
      At line 3 in file BonusEffect.s
   Uses
      At line 12 in file BonusEffect.s
      At line 156 in file BonusEffect.s

getPicHeight 00000000

Symbol: getPicHeight
   Definitions
      At line 6 in file BonusEffect.s
   Uses
      At line 14 in file BonusEffect.s
Comment: getPicHeight used once
getPicWidth 00000000

Symbol: getPicWidth
   Definitions
      At line 5 in file BonusEffect.s
   Uses
      At line 16 in file BonusEffect.s
Comment: getPicWidth used once
main 00000000

Symbol: main
   Definitions
      At line 2 in file BonusEffect.s
   Uses
      None
Comment: main unused
putPic 00000000

Symbol: putPic
   Definitions
      At line 4 in file BonusEffect.s
   Uses
      At line 166 in file BonusEffect.s
Comment: putPic used once
5 symbols
368 symbols in table
